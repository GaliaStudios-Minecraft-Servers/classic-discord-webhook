name: Advanced Discord Notification

on:
  push:
    branches:
      - main

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Hacemos checkout del c칩digo
      - name: Checkout code
        uses: actions/checkout@v4

      # Paso 2: Usamos actions/github-script para construir el JSON del embed
      - name: Build Discord Embed JSON
        id: build_embed
        uses: actions/github-script@v7
        with:
          # Pasamos el payload del evento 'push' completo al script
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // --- CONFIGURACI칍N DE EMOJIS ---
            // 춰IMPORTANTE! Reemplaza estos nombres con los que usaste en tu servidor de Discord.
            const emojis = {
              status: {
                added:    '<:Building:1348393344081985667>',    // Emoji para archivos a침adidos
                modified: '<:Config:1348231530681733173>', // Emoji para archivos modificados
                removed:  '<:Design:1348393339371655209>',  // Emoji para archivos eliminados
              },
              file: {
                java: '<:Dev:1348393341385183375>', // Emoji para archivos .java
                yml:  '<:Documentation:1348234844131430400>',  // Emoji para archivos .yml
                xml:  '<:Like:1348235297753927742>',  // Emoji para archivos .xml
                def:  '游늯' // Emoji por defecto
              }
            };
            // Para obtener el ID del emoji, escribe en Discord \:nombre_del_emoji: y te dar치 el formato completo.

            // Funci칩n para obtener el emoji correspondiente a la extensi칩n de un archivo
            const getFileEmoji = (filename) => {
              const extension = filename.split('.').pop();
              return emojis.file[extension] || emojis.file.def;
            };

            const embeds = [];
            const commits = context.payload.commits.filter(c => c.distinct);

            // Iteramos sobre cada commit del push
            for (const commit of commits) {
              let file_changes = '';

              // A침adimos los archivos de cada categor칤a (added, modified, removed)
              if (commit.added.length > 0) {
                file_changes += commit.added.map(f => `${emojis.status.added} ${getFileEmoji(f)} \`${f}\``).join('\n') + '\n';
              }
              if (commit.modified.length > 0) {
                file_changes += commit.modified.map(f => `${emojis.status.modified} ${getFileEmoji(f)} \`${f}\``).join('\n') + '\n';
              }
              if (commit.removed.length > 0) {
                file_changes += commit.removed.map(f => `${emojis.status.removed} ${getFileEmoji(f)} \`${f}\``).join('\n') + '\n';
              }

              // Creamos un embed para este commit
              embeds.push({
                author: {
                  name: `${commit.message} - ${commit.author.name}`,
                  url: commit.url,
                  icon_url: context.payload.sender.avatar_url
                },
                description: file_changes,
                color: 7506394 // Color de la barra lateral del embed
              });
            }

            // Construimos el objeto final que se enviar치 a Discord
            const body = {
              content: `**${context.payload.repository.name} - ${context.ref.split('/').pop()}** (${commits.length} new commits)`,
              embeds: embeds
            };

            return body;

      # Paso 3: Enviamos el JSON generado al webhook de Discord
      - name: Send to Discord
        uses: ts-prpr/discord-webhook-action@v2
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          payload_json: ${{ toJSON(steps.build_embed.outputs.result) }}